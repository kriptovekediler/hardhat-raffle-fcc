{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__NotUpKeepNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7de8dab672e18760eb62c8b703e2564994d3d36755343887c71cc9bc752d0704",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1249974",
    "logsBloom": "0x
    "blockHash": "0x8f94f3a049eaa6139c4288b91c6e95c1eeaa440ef50410c3dc2c4a8b66fd105d",
    "transactionHash": "0x7de8dab672e18760eb62c8b703e2564994d3d36755343887c71cc9bc752d0704",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1249974",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "10000000000000000",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "f8ecc8ce76e668a2a2a129039fd0aa82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__NotUpKeepNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// Raffle\\n// Enter the lottery (paying some amount)\\n// Pick a random winner (verifiably random)\\n// Winner to be selected every X minutes => completely automate\\n// Chainlink Oracle => Randomness, Automated Execution (Chainlink Keeper)\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__NotUpKeepNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    /* State Variables */\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_keyHash;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    /* Lottery Variables */\\n    address private s_recentWinner;\\n    address payable[] private s_players;\\n    RaffleState private s_raffleState;\\n    uint256 private immutable i_entranceFee;\\n    uint256 private immutable i_interval;\\n    uint256 private s_lastTimeStamp;\\n\\n    event RaffleEnter(address indexed player);\\n    event RequestRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        bytes32 keyHash,\\n        uint256 entranceFee,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_keyHash = keyHash;\\n        i_subscriptionId = subscriptionId;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        s_raffleState = RaffleState.OPEN;\\n        i_interval = interval;\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughETHEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\n        bool hasPlayers = s_players.length > 0;\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && hasPlayers && timePassed && hasBalance);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__NotUpKeepNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_keyHash,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256,\\n        /*requestId*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        s_raffleState = RaffleState.OPEN;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n}\\n\",\"keccak256\":\"0xf8e40ddd278b9d817d75815962ce56c347c72cf0568fb7f9058b2c113e85f1c9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620018ec380380620018ec8339818101604052810190620000389190620001d1565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508361012081815250508163ffffffff166101008163ffffffff1660e01b815250508460c081815250508267ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250506000600260006101000a81548160ff021916908360018111156200013d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055508061014081815250504260038190555050505050505062000355565b6000815190506200016f81620002d3565b92915050565b6000815190506200018681620002ed565b92915050565b6000815190506200019d8162000307565b92915050565b600081519050620001b48162000321565b92915050565b600081519050620001cb816200033b565b92915050565b60008060008060008060c08789031215620001eb57600080fd5b6000620001fb89828a016200015e565b96505060206200020e89828a0162000175565b95505060406200022189828a016200018c565b94505060606200023489828a01620001ba565b93505060806200024789828a01620001a3565b92505060a06200025a89828a016200018c565b9150509295509295509295565b6000620002748262000285565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b620002de8162000267565b8114620002ea57600080fd5b50565b620002f8816200027b565b81146200030457600080fd5b50565b6200031281620002a5565b81146200031e57600080fd5b50565b6200032c81620002af565b81146200033857600080fd5b50565b6200034681620002bf565b81146200035257600080fd5b50565b60805160601c60a05160601c60c05160e05160c01c6101005160e01c610120516101405161151b620003d16000396000818161088901526108eb0152600081816102b401526103b1015260006106ee015260006106cb015260006106aa0152600061066e0152600081816102f10152610345015261151b6000f3fe6080604052600436106100a75760003560e01c806353a2c19a1161006457806353a2c19a146101895780636e04ff0d146101b457806391ad27b4146101f2578063c1c244e81461021d578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b5780634585e33b14610135578063473f1ddc1461015e575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce919061116e565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190611153565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610f4f565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061015c60048036038101906101579190610e77565b61056a565b005b34801561016a57600080fd5b506101736107b6565b604051610180919061108c565b60405180910390f35b34801561019557600080fd5b5061019e6107df565b6040516101ab919061116e565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d69190610ebc565b6107ee565b6040516101e99291906110d0565b60405180910390f35b3480156101fe57600080fd5b506102076108e7565b604051610214919061116e565b60405180910390f35b34801561022957600080fd5b5061023261090f565b60405161023f919061116e565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a9190610efd565b610919565b60405161027c919061108c565b60405180910390f35b34801561029157600080fd5b5061029a610987565b6040516102a7919061116e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103989291906110a7565b60405180910390fd5b6103ab8282610994565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115610443577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600260009054906101000a900460ff16600181111561048b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146104c2576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000610584604051806020016040528060008152506107ee565b509050806106195747600180549050600260009054906101000a900460ff1660018111156105db577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040517f46d040fd00000000000000000000000000000000000000000000000000000000815260040161061093929190611189565b60405180910390fd5b6001600260006101000a81548160ff02191690836001811115610665577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161072f959493929190611100565b602060405180830381600087803b15801561074957600080fd5b505af115801561075d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107819190610f26565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600260009054906101000a900460ff16600181111561083c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006001811115610876577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14905060008060018054905011905060007f0000000000000000000000000000000000000000000000000000000000000000600354426108b69190611269565b119050600080471190508380156108ca5750825b80156108d35750815b80156108dc5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b600060018281548110610955577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600180549050905090565b6000600180549050826000815181106109d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516109e891906113b9565b9050600060018281548110610a26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610ad4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610b025781602001602082028036833780820191505090505b5060019080519060200190610b18929190610c5e565b50426003819055506000600260006101000a81548160ff02191690836001811115610b6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b9790611077565b60006040518083038185875af1925050503d8060008114610bd4576040519150601f19603f3d011682016040523d82523d6000602084013e610bd9565b606091505b5050905080610c14576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610cd7579160200282015b82811115610cd65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c7e565b5b509050610ce49190610ce8565b5090565b5b80821115610d01576000816000905550600101610ce9565b5090565b6000610d18610d13846111e5565b6111c0565b90508083825260208201905082856020860282011115610d3757600080fd5b60005b85811015610d675781610d4d8882610e4d565b845260208401935060208301925050600181019050610d3a565b5050509392505050565b6000610d84610d7f84611211565b6111c0565b905082815260208101848484011115610d9c57600080fd5b610da7848285611346565b509392505050565b600082601f830112610dc057600080fd5b8135610dd0848260208601610d05565b91505092915050565b60008083601f840112610deb57600080fd5b8235905067ffffffffffffffff811115610e0457600080fd5b602083019150836001820283011115610e1c57600080fd5b9250929050565b600082601f830112610e3457600080fd5b8135610e44848260208601610d71565b91505092915050565b600081359050610e5c816114ce565b92915050565b600081519050610e71816114ce565b92915050565b60008060208385031215610e8a57600080fd5b600083013567ffffffffffffffff811115610ea457600080fd5b610eb085828601610dd9565b92509250509250929050565b600060208284031215610ece57600080fd5b600082013567ffffffffffffffff811115610ee857600080fd5b610ef484828501610e23565b91505092915050565b600060208284031215610f0f57600080fd5b6000610f1d84828501610e4d565b91505092915050565b600060208284031215610f3857600080fd5b6000610f4684828501610e62565b91505092915050565b60008060408385031215610f6257600080fd5b6000610f7085828601610e4d565b925050602083013567ffffffffffffffff811115610f8d57600080fd5b610f9985828601610daf565b9150509250929050565b610fac8161129d565b82525050565b610fbb816112af565b82525050565b610fca816112bb565b82525050565b6000610fdb82611242565b610fe5818561124d565b9350610ff5818560208601611355565b610ffe816114a6565b840191505092915050565b61101281611334565b82525050565b600061102560008361125e565b9150611030826114b7565b600082019050919050565b611044816112d8565b82525050565b61105381611306565b82525050565b61106281611310565b82525050565b61107181611320565b82525050565b600061108282611018565b9150819050919050565b60006020820190506110a16000830184610fa3565b92915050565b60006040820190506110bc6000830185610fa3565b6110c96020830184610fa3565b9392505050565b60006040820190506110e56000830185610fb2565b81810360208301526110f78184610fd0565b90509392505050565b600060a0820190506111156000830188610fc1565b6111226020830187611068565b61112f604083018661103b565b61113c6060830185611059565b6111496080830184611059565b9695505050505050565b60006020820190506111686000830184611009565b92915050565b6000602082019050611183600083018461104a565b92915050565b600060608201905061119e600083018661104a565b6111ab602083018561104a565b6111b8604083018461104a565b949350505050565b60006111ca6111db565b90506111d68282611388565b919050565b6000604051905090565b600067ffffffffffffffff821115611200576111ff611477565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561122c5761122b611477565b5b611235826114a6565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061127482611306565b915061127f83611306565b925082821015611292576112916113ea565b5b828203905092915050565b60006112a8826112e6565b9050919050565b60008115159050919050565b6000819050919050565b60008190506112d3826114ba565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061133f826112c5565b9050919050565b82818337600083830152505050565b60005b83811015611373578082015181840152602081019050611358565b83811115611382576000848401525b50505050565b611391826114a6565b810181811067ffffffffffffffff821117156113b0576113af611477565b5b80604052505050565b60006113c482611306565b91506113cf83611306565b9250826113df576113de611419565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b50565b600281106114cb576114ca611448565b5b50565b6114d781611306565b81146114e257600080fd5b5056fea2646970667358221220814265f8ed74b0d547bed6ed28ee1d44c7a7207b5b64df88da9cee4f508d117a64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c806353a2c19a1161006457806353a2c19a146101895780636e04ff0d146101b457806391ad27b4146101f2578063c1c244e81461021d578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b5780634585e33b14610135578063473f1ddc1461015e575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce919061116e565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190611153565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610f4f565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061015c60048036038101906101579190610e77565b61056a565b005b34801561016a57600080fd5b506101736107b6565b604051610180919061108c565b60405180910390f35b34801561019557600080fd5b5061019e6107df565b6040516101ab919061116e565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d69190610ebc565b6107ee565b6040516101e99291906110d0565b60405180910390f35b3480156101fe57600080fd5b506102076108e7565b604051610214919061116e565b60405180910390f35b34801561022957600080fd5b5061023261090f565b60405161023f919061116e565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a9190610efd565b610919565b60405161027c919061108c565b60405180910390f35b34801561029157600080fd5b5061029a610987565b6040516102a7919061116e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103989291906110a7565b60405180910390fd5b6103ab8282610994565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115610443577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600260009054906101000a900460ff16600181111561048b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146104c2576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000610584604051806020016040528060008152506107ee565b509050806106195747600180549050600260009054906101000a900460ff1660018111156105db577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040517f46d040fd00000000000000000000000000000000000000000000000000000000815260040161061093929190611189565b60405180910390fd5b6001600260006101000a81548160ff02191690836001811115610665577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161072f959493929190611100565b602060405180830381600087803b15801561074957600080fd5b505af115801561075d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107819190610f26565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600260009054906101000a900460ff16600181111561083c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006001811115610876577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14905060008060018054905011905060007f0000000000000000000000000000000000000000000000000000000000000000600354426108b69190611269565b119050600080471190508380156108ca5750825b80156108d35750815b80156108dc5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b600060018281548110610955577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600180549050905090565b6000600180549050826000815181106109d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516109e891906113b9565b9050600060018281548110610a26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610ad4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610b025781602001602082028036833780820191505090505b5060019080519060200190610b18929190610c5e565b50426003819055506000600260006101000a81548160ff02191690836001811115610b6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b9790611077565b60006040518083038185875af1925050503d8060008114610bd4576040519150601f19603f3d011682016040523d82523d6000602084013e610bd9565b606091505b5050905080610c14576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610cd7579160200282015b82811115610cd65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c7e565b5b509050610ce49190610ce8565b5090565b5b80821115610d01576000816000905550600101610ce9565b5090565b6000610d18610d13846111e5565b6111c0565b90508083825260208201905082856020860282011115610d3757600080fd5b60005b85811015610d675781610d4d8882610e4d565b845260208401935060208301925050600181019050610d3a565b5050509392505050565b6000610d84610d7f84611211565b6111c0565b905082815260208101848484011115610d9c57600080fd5b610da7848285611346565b509392505050565b600082601f830112610dc057600080fd5b8135610dd0848260208601610d05565b91505092915050565b60008083601f840112610deb57600080fd5b8235905067ffffffffffffffff811115610e0457600080fd5b602083019150836001820283011115610e1c57600080fd5b9250929050565b600082601f830112610e3457600080fd5b8135610e44848260208601610d71565b91505092915050565b600081359050610e5c816114ce565b92915050565b600081519050610e71816114ce565b92915050565b60008060208385031215610e8a57600080fd5b600083013567ffffffffffffffff811115610ea457600080fd5b610eb085828601610dd9565b92509250509250929050565b600060208284031215610ece57600080fd5b600082013567ffffffffffffffff811115610ee857600080fd5b610ef484828501610e23565b91505092915050565b600060208284031215610f0f57600080fd5b6000610f1d84828501610e4d565b91505092915050565b600060208284031215610f3857600080fd5b6000610f4684828501610e62565b91505092915050565b60008060408385031215610f6257600080fd5b6000610f7085828601610e4d565b925050602083013567ffffffffffffffff811115610f8d57600080fd5b610f9985828601610daf565b9150509250929050565b610fac8161129d565b82525050565b610fbb816112af565b82525050565b610fca816112bb565b82525050565b6000610fdb82611242565b610fe5818561124d565b9350610ff5818560208601611355565b610ffe816114a6565b840191505092915050565b61101281611334565b82525050565b600061102560008361125e565b9150611030826114b7565b600082019050919050565b611044816112d8565b82525050565b61105381611306565b82525050565b61106281611310565b82525050565b61107181611320565b82525050565b600061108282611018565b9150819050919050565b60006020820190506110a16000830184610fa3565b92915050565b60006040820190506110bc6000830185610fa3565b6110c96020830184610fa3565b9392505050565b60006040820190506110e56000830185610fb2565b81810360208301526110f78184610fd0565b90509392505050565b600060a0820190506111156000830188610fc1565b6111226020830187611068565b61112f604083018661103b565b61113c6060830185611059565b6111496080830184611059565b9695505050505050565b60006020820190506111686000830184611009565b92915050565b6000602082019050611183600083018461104a565b92915050565b600060608201905061119e600083018661104a565b6111ab602083018561104a565b6111b8604083018461104a565b949350505050565b60006111ca6111db565b90506111d68282611388565b919050565b6000604051905090565b600067ffffffffffffffff821115611200576111ff611477565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561122c5761122b611477565b5b611235826114a6565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061127482611306565b915061127f83611306565b925082821015611292576112916113ea565b5b828203905092915050565b60006112a8826112e6565b9050919050565b60008115159050919050565b6000819050919050565b60008190506112d3826114ba565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061133f826112c5565b9050919050565b82818337600083830152505050565b60005b83811015611373578082015181840152602081019050611358565b83811115611382576000848401525b50505050565b611391826114a6565b810181811067ffffffffffffffff821117156113b0576113af611477565b5b80604052505050565b60006113c482611306565b91506113cf83611306565b9250826113df576113de611419565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b50565b600281106114cb576114ca611448565b5b50565b6114d781611306565b81146114e257600080fd5b5056fea2646970667358221220814265f8ed74b0d547bed6ed28ee1d44c7a7207b5b64df88da9cee4f508d117a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 882,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 885,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 888,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(RaffleState)865"
      },
      {
        "astId": 894,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)865": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}